# Generated by Django 4.2 on 2023-04-14 08:41

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="LocationData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("ip_type", models.CharField(max_length=10)),
                ("Continent_Code", models.CharField(max_length=100)),
                ("Continent_Name", models.CharField(max_length=100)),
                ("Country_Name", models.CharField(max_length=100)),
                ("Region_Name", models.CharField(max_length=100)),
                ("City", models.CharField(max_length=100)),
                ("Zip_Code", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="weatherData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("location", models.CharField(max_length=100)),
                ("region", models.CharField(max_length=100)),
                ("country", models.CharField(max_length=100)),
                ("time_zone", models.CharField(max_length=100)),
                ("local_time", models.DateTimeField()),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                ("TemperatureC", models.FloatField()),
                ("TemperatureF", models.FloatField()),
                ("Humidity", models.IntegerField()),
                ("Feels_Like_C", models.FloatField()),
                ("Feels_Like_F", models.FloatField()),
                ("Wind_Speed_kph", models.FloatField()),
                ("Wind_Speed_Mph", models.FloatField()),
                ("Wind_Dirction", models.CharField(max_length=10)),
                ("Wind_Direction_Degree", models.IntegerField()),
                ("Expected_Precipitation_mm", models.FloatField()),
                ("Expected_Precipitation_in", models.FloatField()),
                ("Last_Updated", models.DateTimeField()),
                ("Time_of_Day", models.BooleanField()),
                ("Cloud_Cover_Percentage", models.IntegerField()),
                ("Weather_Condition", models.CharField(max_length=100)),
                ("uv", models.FloatField()),
                ("Visibility_KM", models.FloatField()),
                ("Visibility_miles", models.FloatField()),
                ("Pressure_milliBar", models.FloatField()),
                ("Pressure_inWater", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="AirQualityData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("Carbon_Monoxide", models.FloatField()),
                ("NO2", models.FloatField()),
                ("Ozone", models.FloatField()),
                ("Sulfur_Dioxide", models.FloatField()),
                ("Fine_Particulates", models.FloatField()),
                ("ULTRA_Fine_Particulates", models.FloatField()),
                ("USA_EPA_index", models.IntegerField()),
                ("EU_DAILY_AIR_QUALITY_index", models.IntegerField()),
                (
                    "weather_data",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="current.weatherdata",
                    ),
                ),
            ],
        ),
    ]
